import requests
import asyncio
import json
import urllib3

from walkoff_app_sdk.app_base import AppBase

class Connectwise_Service_API(AppBase):
    """
    Autogenerated class by Shuffler
    """
    
    __version__ = "1.0"
    app_name = "Connectwise_Service_API"
    
    def __init__(self, redis, logger, console_logger=None):
        self.verify = False
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        super().__init__(redis, logger, console_logger)

    async def get_typeid(self, username_basic, password_basic, custom_headers, id, typeId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/types/{typeId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_typeid(self, username_basic, password_basic, custom_headers, id, typeId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/types/{typeId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_typeid(self, username_basic, password_basic, custom_headers, id, typeId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/types/{typeId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_typeid(self, username_basic, password_basic, custom_headers, id, typeId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/types/{typeId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_timeentries(self, username_basic, password_basic, custom_headers, id, page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/timeentries"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_knowledge_base_settingses_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgebasesettings/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_knowledgebasesettings(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgebasesettings/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_knowledgebasesettings(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgebasesettings/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_service_team_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/teams/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_ticket_configurations(self, username_basic, password_basic, custom_headers, id, page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/configurations"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_configuration_association(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/configurations"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_ticket_documents_count(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/documents/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def gets_the_products_associated_to_the_ticket_________please_use_the_procurementproductscountconditionschargetotypeticket_and_chargetoidid_endpoint(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/products/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_s_l_a_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_knowledge_base_articles_count(self, username_basic, password_basic, custom_headers, conditions="", customFieldConditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseArticles/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if customFieldConditions:
            params["customFieldConditions"] = customFieldConditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_service_signoff_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/serviceSignoff/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_servicesignoff(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/serviceSignoff/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_servicesignoff(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/serviceSignoff/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_servicesignoff(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/serviceSignoff/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_severities(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/severities"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_ticketsyncs(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketSyncs"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_ticketsyncs(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketSyncs"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_configid(self, username_basic, password_basic, custom_headers, id, configId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/configurations/{configId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_configid(self, username_basic, password_basic, custom_headers, id, configId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/configurations/{configId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_type_sub_type_item_association_by_id(self, username_basic, password_basic, custom_headers, id, typeSubTypeItemAssociationId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/typeSubTypeItemAssociations/{typeSubTypeItemAssociationId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_email_template_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/emailTemplates/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_emailtemplates(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/emailTemplates/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_emailtemplates(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/emailTemplates/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_emailtemplates(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/emailTemplates/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_subtypes_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/subtypes/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_service_email_template_list_usages(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/emailTemplates/{id}/usages/list"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_type_info_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/info/boardtypes/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_knowledge_base_sub_categories_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseSubCategories/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_priority_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/priorities/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_priority_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/priorities/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_update_priority(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/priorities/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_replace_priority(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/priorities/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_sources(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/sources"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_source(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/sources"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_source_usages_count(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/sources/{id}/usages"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_status_notifications_count(self, username_basic, password_basic, custom_headers, boardId, statusId, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{boardId}/statuses/{statusId}/notifications/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_subtypeid(self, username_basic, password_basic, custom_headers, id, subtypeId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/subtypes/{subtypeId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_subtypeid(self, username_basic, password_basic, custom_headers, id, subtypeId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/subtypes/{subtypeId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_subtypeid(self, username_basic, password_basic, custom_headers, id, subtypeId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/subtypes/{subtypeId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_subtypeid(self, username_basic, password_basic, custom_headers, id, subtypeId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/subtypes/{subtypeId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_survey_usage_count(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/usages"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_survey_options_count(self, username_basic, password_basic, custom_headers, surveyID, questionID, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{surveyID}/questions/{questionID}/options/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_service_ticket_links_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketLinks/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_tickets(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_ticket(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_tickets_count(self, username_basic, password_basic, custom_headers, conditions="", customFieldConditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if customFieldConditions:
            params["customFieldConditions"] = customFieldConditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_knowledgebasearticles(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseArticles"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_knowledgebasearticles(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseArticles"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_location_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/locations/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_location_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/locations/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_update_location(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/locations/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_replace_location(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/locations/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_codes(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/codes"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_codes(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/codes"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_emailtemplates(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/emailTemplates"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_emailtemplates(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/emailTemplates"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_service_signoff_list_usages(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/serviceSignoff/{id}/usages/list"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_slas(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_slas(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_items_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/items/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_template_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/templates/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_impact(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/impacts"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_knowledge_base_category_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseCategories/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_knowledgebasecategories(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseCategories/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_knowledgebasecategories(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseCategories/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_knowledgebasecategories(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseCategories/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_auto_assign_resources_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoAssignResources/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_taskid(self, username_basic, password_basic, custom_headers, id, taskId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/tasks/{taskId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_taskid(self, username_basic, password_basic, custom_headers, id, taskId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/tasks/{taskId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_taskid(self, username_basic, password_basic, custom_headers, id, taskId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/tasks/{taskId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_taskid(self, username_basic, password_basic, custom_headers, id, taskId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/tasks/{taskId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_typesubtypeitemassociations(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/typeSubTypeItemAssociations"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_type_sub_type_item_associations_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/typeSubTypeItemAssociations/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_knowledgebasesubcategories(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseSubCategories"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_knowledgebasesubcategories(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseSubCategories"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_s_l_a_list_usages(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/{id}/usages/list"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_board_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_update_board(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_replace_board(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_service_teams(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/teams"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_ticket_configurations_count(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/configurations/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_merge(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/merge"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def gets_time_entries_count_associated_to_the_ticket_________please_use_the_timeentriescountconditionschargetotypeserviceticket_or_chargetotypeprojectticket_and_chargetoidid_endpoint(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/timeentries/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_notifications_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/notifications/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_types_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/types/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_service_ticket_link_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketLinks/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_ticketlinks(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketLinks/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_ticketlinks(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketLinks/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_ticketlinks(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketLinks/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_usages_count(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/usages"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_templates(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/templates"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_team_list_usages(self, username_basic, password_basic, custom_headers, id, teamId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/teams/{teamId}/usages/list"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_service_email_template_usages_count(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/emailTemplates/{id}/usages"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_templates_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/templates/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_service_notes_count(self, username_basic, password_basic, custom_headers, parentId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{parentId}/notes/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_service_note_by_id(self, username_basic, password_basic, custom_headers, id, parentId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{parentId}/notes/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_parentid(self, username_basic, password_basic, custom_headers, id, parentId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{parentId}/notes/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_parentid(self, username_basic, password_basic, custom_headers, id, parentId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{parentId}/notes/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_parentid(self, username_basic, password_basic, custom_headers, id, parentId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{parentId}/notes/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_boards_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_status_usages_count(self, username_basic, password_basic, custom_headers, id, statusId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/statuses/{statusId}/usages"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_generate(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/templates/{id}/generate"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_item_usages(self, username_basic, password_basic, custom_headers, id, itemId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/items/{itemId}/usages/list"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_types_list_usages(self, username_basic, password_basic, custom_headers, id, typeId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/types/{typeId}/usages/list"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_scheduleentries(self, username_basic, password_basic, custom_headers, id, page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/scheduleentries"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_parentid(self, username_basic, password_basic, custom_headers, parentId, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{parentId}/notes"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_parentid(self, username_basic, password_basic, custom_headers, parentId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{parentId}/notes"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_boards(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_board(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_external_integration_status_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/statusExternalIntegrationReferences/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_statusid(self, username_basic, password_basic, custom_headers, id, statusId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/statuses/{statusId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_statusid(self, username_basic, password_basic, custom_headers, id, statusId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/statuses/{statusId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_statusid(self, username_basic, password_basic, custom_headers, id, statusId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/statuses/{statusId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_statusid(self, username_basic, password_basic, custom_headers, id, statusId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/statuses/{statusId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_knowledge_base_categories_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseCategories/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_statusexternalintegrationreferences(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/statusExternalIntegrationReferences"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_surveyid(self, username_basic, password_basic, custom_headers, surveyID, questionID, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{surveyID}/questions/{questionID}/options"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_surveyid(self, username_basic, password_basic, custom_headers, surveyID, questionID, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{surveyID}/questions/{questionID}/options"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_boardid(self, username_basic, password_basic, custom_headers, boardId, itemId, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{boardId}/items/{itemId}/associations/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_boardid(self, username_basic, password_basic, custom_headers, boardId, itemId, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{boardId}/items/{itemId}/associations/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_statuses_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/statuses/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_code_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/codes/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_code_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/codes/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_update_code(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/codes/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_replace_code(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/codes/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_s_l_a_priority(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/{id}/priorities"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_s_l_a_priority(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/{id}/priorities"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_teamid(self, username_basic, password_basic, custom_headers, id, teamId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/teams/{teamId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_teamid(self, username_basic, password_basic, custom_headers, id, teamId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/teams/{teamId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_teamid(self, username_basic, password_basic, custom_headers, id, teamId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/teams/{teamId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_teamid(self, username_basic, password_basic, custom_headers, id, teamId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/teams/{teamId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_notifications(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/notifications"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_board_notification(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/notifications"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_email_templates_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/emailTemplates/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_locations(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/locations"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_location(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/locations"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_survey_results_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/results/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_ticketlinks(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketLinks"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_ticketlinks(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketLinks"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_documents(self, username_basic, password_basic, custom_headers, id, page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/documents"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_autotemplates(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoTemplates"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_autotemplates(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoTemplates"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_excluded_members_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/excludedMembers/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_products(self, username_basic, password_basic, custom_headers, id, page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/products"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_list_usages(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/usages/list"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_impact_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/impacts/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_service_signoff_usages_count(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/serviceSignoff/{id}/usages"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_create_sources_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/sources/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_auto_templates_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoTemplates/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_items(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/items"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_item(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/items"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_survey_questions_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/questions/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_knowledge_base_sub_category_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseSubCategories/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_knowledgebasesubcategories(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseSubCategories/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_knowledgebasesubcategories(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseSubCategories/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_knowledgebasesubcategories(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseSubCategories/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_create_priorities_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/priorities/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_itemid(self, username_basic, password_basic, custom_headers, id, itemId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/items/{itemId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_itemid(self, username_basic, password_basic, custom_headers, id, itemId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/items/{itemId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_itemid(self, username_basic, password_basic, custom_headers, id, itemId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/items/{itemId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_itemid(self, username_basic, password_basic, custom_headers, id, itemId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/items/{itemId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_item_usages_count(self, username_basic, password_basic, custom_headers, id, itemId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/items/{itemId}/usages"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_teams_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/teams/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_type_usages_count(self, username_basic, password_basic, custom_headers, id, typeId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/types/{typeId}/usages"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_infos_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/info/boards/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_type_infos(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/info/boardtypes"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_auto_template_by_id(self, username_basic, password_basic, custom_headers, id, autoTemplateId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoTemplates/{autoTemplateId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_autotemplates(self, username_basic, password_basic, custom_headers, id, autoTemplateId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoTemplates/{autoTemplateId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_autotemplates(self, username_basic, password_basic, custom_headers, id, autoTemplateId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoTemplates/{autoTemplateId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_autotemplates(self, username_basic, password_basic, custom_headers, id, autoTemplateId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoTemplates/{autoTemplateId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_excludedmembers(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/excludedMembers"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_excludedmembers(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/excludedMembers"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_survey_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_survey_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_update_survey(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_replace_survey(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_search(self, username_basic, password_basic, custom_headers, page="", pageSize="", pageId="", body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/search"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_service_teams_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/teams/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_ticket_syncs_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketSyncs/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_activities(self, username_basic, password_basic, custom_headers, id, page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/activities"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_status_notifications(self, username_basic, password_basic, custom_headers, boardId, statusId, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{boardId}/statuses/{statusId}/notifications"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_boardid(self, username_basic, password_basic, custom_headers, boardId, statusId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{boardId}/statuses/{statusId}/notifications"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_priorities(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/priorities"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_priority(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/priorities"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_source_list_usages(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/sources/{id}/usages/list"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_surveys(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_survey(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_questionid(self, username_basic, password_basic, custom_headers, id, questionId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/questions/{questionId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_questionid(self, username_basic, password_basic, custom_headers, id, questionId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/questions/{questionId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_questionid(self, username_basic, password_basic, custom_headers, id, questionId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/questions/{questionId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_questionid(self, username_basic, password_basic, custom_headers, id, questionId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/questions/{questionId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_ticket_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_ticket_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_update_ticket(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_replace_ticket(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_s_l_a_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_slas(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_slas(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_slas(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_image(self, username_basic, password_basic, custom_headers, id, useDefaultFlag="", lastModified="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/priorities/{id}/image"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if useDefaultFlag:
            params["useDefaultFlag"] = useDefaultFlag
        if lastModified:
            params["lastModified"] = lastModified
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_impact_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/impacts/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_update_impact(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/impacts/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_replace_impact(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/impacts/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_info_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/info/boards/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_item_association_count(self, username_basic, password_basic, custom_headers, boardId, itemId, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{boardId}/items/{itemId}/associations/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_status_notification_by_id(self, username_basic, password_basic, custom_headers, boardId, statusId, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{boardId}/statuses/{statusId}/notifications/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_boardid(self, username_basic, password_basic, custom_headers, boardId, statusId, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{boardId}/statuses/{statusId}/notifications/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_update_board_status_notification(self, username_basic, password_basic, custom_headers, boardId, statusId, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{boardId}/statuses/{statusId}/notifications/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_replace_board_status_notification(self, username_basic, password_basic, custom_headers, boardId, statusId, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{boardId}/statuses/{statusId}/notifications/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_types(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/types"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_type(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/types"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_survey_results(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/results"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_survey_result(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/results"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_survey_option_by_id(self, username_basic, password_basic, custom_headers, surveyID, questionID, oid, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{surveyID}/questions/{questionID}/options/{oid}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_surveyid(self, username_basic, password_basic, custom_headers, surveyID, questionID, oid, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{surveyID}/questions/{questionID}/options/{oid}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_surveyid(self, username_basic, password_basic, custom_headers, surveyID, questionID, oid, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{surveyID}/questions/{questionID}/options/{oid}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_surveyid(self, username_basic, password_basic, custom_headers, surveyID, questionID, oid, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{surveyID}/questions/{questionID}/options/{oid}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_convert(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/convert"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_s_l_a_usage_count(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/{id}/usages"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_sub_type_usages(self, username_basic, password_basic, custom_headers, id, subTypeId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/subtypes/{subtypeId}/usages/list"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_knowledge_base_article_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseArticles/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_knowledgebasearticles(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseArticles/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_knowledgebasearticles(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseArticles/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_knowledgebasearticles(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseArticles/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_source_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/sources/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_source_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/sources/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_update_source(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/sources/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_replace_source(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/sources/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_copy(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/copy"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_status_usages(self, username_basic, password_basic, custom_headers, id, statusId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/statuses/{statusId}/usages/list"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_servicesignoff(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/serviceSignoff"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_servicesignoff(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/serviceSignoff"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_survey_list_usages(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/usages/list"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_teammembers(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/teamMembers"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_teammembers(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/teamMembers"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_team_members_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/teamMembers/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_item_association_by_id(self, username_basic, password_basic, custom_headers, boardId, itemId, associationId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{boardId}/items/{itemId}/associations/{associationId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_teams(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/teams"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_team(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/teams"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_excluded_member_by_id(self, username_basic, password_basic, custom_headers, id, excludedMemberId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/excludedMembers/{excludedMemberId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_excludedmembers(self, username_basic, password_basic, custom_headers, id, excludedMemberId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/excludedMembers/{excludedMemberId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_statuses(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/statuses"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_statuses(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/statuses"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_sub_type_usages_count(self, username_basic, password_basic, custom_headers, id, subTypeId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/subtypes/{subtypeId}/usages"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_knowledgebasecategories(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseCategories"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_knowledgebasecategories(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgeBaseCategories"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_create_locations_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/locations/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def gets_the_schedule_entries_count_associated_to_the_ticket_________please_use_the_scheduleentriescountconditionstypeid4_and_objectidid_endpoint(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/scheduleentries/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_s_l_a_priority_by_id(self, username_basic, password_basic, custom_headers, id, priorityId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/{id}/priorities/{priorityId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_s_l_a_priority_by_id(self, username_basic, password_basic, custom_headers, id, priorityId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/{id}/priorities/{priorityId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_update_s_l_a_priority(self, username_basic, password_basic, custom_headers, id, priorityId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/{id}/priorities/{priorityId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_replace_s_l_a_priority(self, username_basic, password_basic, custom_headers, id, priorityId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/{id}/priorities/{priorityId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_auto_assign_resource_by_id(self, username_basic, password_basic, custom_headers, id, autoAssignResourceId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoAssignResources/{autoAssignResourceId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_autoassignresources(self, username_basic, password_basic, custom_headers, id, autoAssignResourceId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoAssignResources/{autoAssignResourceId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_autoassignresources(self, username_basic, password_basic, custom_headers, id, autoAssignResourceId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoAssignResources/{autoAssignResourceId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_autoassignresources(self, username_basic, password_basic, custom_headers, id, autoAssignResourceId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoAssignResources/{autoAssignResourceId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_tasks_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/tasks/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_team_member_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/teamMembers/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_teammembers(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/teamMembers/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_ticket_sync_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketSyncs/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_ticketsyncs(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketSyncs/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_ticketsyncs(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketSyncs/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_ticketsyncs(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/ticketSyncs/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_type_infos_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/info/boardtypes/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_service_signoffs_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/serviceSignoff/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_status_external_integration_references_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/statusExternalIntegrationReferences/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_surveys_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_copy_survey(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/copy"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_resultid(self, username_basic, password_basic, custom_headers, id, resultId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/results/{resultId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_resultid(self, username_basic, password_basic, custom_headers, id, resultId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/results/{resultId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_resultid(self, username_basic, password_basic, custom_headers, id, resultId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/results/{resultId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_resultid(self, username_basic, password_basic, custom_headers, id, resultId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/results/{resultId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_notificationid(self, username_basic, password_basic, custom_headers, id, notificationId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/notifications/{notificationId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def delete_notificationid(self, username_basic, password_basic, custom_headers, id, notificationId, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/notifications/{notificationId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.delete(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_notificationid(self, username_basic, password_basic, custom_headers, id, notificationId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/notifications/{notificationId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_notificationid(self, username_basic, password_basic, custom_headers, id, notificationId, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/notifications/{notificationId}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_create_codes_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/codes/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_autoassignresources(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoAssignResources"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_autoassignresources(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/autoAssignResources"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_knowledgebasesettings(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgebasesettings"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_knowledgebasesettings(self, username_basic, password_basic, custom_headers, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/knowledgebasesettings"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_severities_count(self, username_basic, password_basic, custom_headers, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/severities/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_survey_questions(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/questions"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_survey_question(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/surveys/{id}/questions"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_tasks(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/tasks"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_task(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/tasks"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_s_l_a_priority_count(self, username_basic, password_basic, custom_headers, id, conditions="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/SLAs/{id}/priorities/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_boardid(self, username_basic, password_basic, custom_headers, boardId, itemId, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{boardId}/items/{itemId}/associations"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_severity_by_id(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/severities/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def patch_update_severity(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/severities/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.patch(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def put_replace_severity(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/severities/{id}"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.put(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def gets_count_of_activities_associated_to_the_ticket_________please_use_the_salesactivitiescountconditionsticketidid_endpoint(self, username_basic, password_basic, custom_headers, id, ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/tickets/{id}/activities/count"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_subtypes(self, username_basic, password_basic, custom_headers, id, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/subtypes"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def post_create_subtype(self, username_basic, password_basic, custom_headers, id, body="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/boards/{id}/subtypes"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        body = " ".join(body.strip().split()).encode("utf-8")
        
        
        ret = requests.post(url, headers=headers, params=params, auth=(username_basic, password_basic), data=body, verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        
    async def get_board_infos(self, username_basic, password_basic, custom_headers, conditions="", orderBy="", childconditions="", customfieldconditions="", page="", pageSize="", pageId="", ssl_verify=False):
        params={}
        headers=json.loads(custom_headers)
        url=f"https://api-na.myconnectwise.net/v4_6_release/apis/3.0/service/info/boards"
        if type(ssl_verify) == str: ssl_verify = False if ssl_verify.lower() == "false" or ssl_verify == "0" else True
        
        
        if conditions:
            params["conditions"] = conditions
        if orderBy:
            params["orderBy"] = orderBy
        if childconditions:
            params["childconditions"] = childconditions
        if customfieldconditions:
            params["customfieldconditions"] = customfieldconditions
        if page:
            params["page"] = page
        if pageSize:
            params["pageSize"] = pageSize
        if pageId:
            params["pageId"] = pageId
        
        
        
        ret = requests.get(url, headers=headers, params=params, auth=(username_basic, password_basic), verify=ssl_verify)
        try:
          return ret.json()
        except json.decoder.JSONDecodeError:
          return ret.text
        

if __name__ == "__main__":
    asyncio.run(Connectwise_Service_API.run(), debug=True)
